//
// zengrid.scss
// v1.0
//

// TODO:
// Revisar los @extend dentro de los @mediaqueries

// MINI-DOC:
//
// <tag class="container"></tag> Contenedor principal
//
// <tag class="row"></tag> Fila donde se alojan las columnas
//
// <tag class="w2"></tag> Una columna de ancho 2
// <tag class="center(w4)"></tag> Una columna de ancho 4 centrada
// <tag class="w2 w8(small)"></tag> Una columna de ancho 2 y ancho 8 en el breakpoint 'small'
// <tag class="w6$"></tag> Una columna de ancho 6 que "termina" la fila
// <tag class="50%"></tag> Una columna de 50% de ancho

// Mediaqueries
@import "media-queries";

// Vars

    // Setup
    $setup: (
        foo: (),
        bars: (),
        breakpoints: (
            small: (
                name: "small",
                cols: 6,
                viewport: 900px,
                container: 640px,
                gutter: 4px
            ),

            med: (
                name: "medium",
                cols: 8,
                viewport: 1300px,
                container: 750px,
                gutter: 4px
            ),

            large: (
                name: "large",
                cols: 8,
                viewport: 1600px,
                container: 1200px,
                gutter: 30px
            ),

            xlarge: (
                name: "xlarge",
                cols: 8,
                viewport: 2560px,
                container: 1500px,
                gutter: 40px
            )
        )
    );


// Classes

    // Debug purpose (start)
    .grid { margin: 0 auto; overflow: hidden; position: fixed; left: 0; right: 0; top: 0; bottom: 0; }
    .grid .guide { float: left; height: 100%; bottom: 0; background-clip: content-box; background-color: yellow; opacity: 0.2 }
    .grid .guide:first-child  { padding-left: 0; }
    // Debug purpose (end)
    .container { margin: 0 auto; overflow: hidden; }
    // Row
    .row  { width: 100%; clear: both; }
    .row > *  { background-color: rgba(19, 90, 190, 0.8); background-clip: content-box; float: left; /* Debug */ min-height: 40px; margin-bottom: 10px; /* Debug */ }
    .row div:first-child  { padding-left: 0; }

    $numberOfBreakPoints: length(map-get($setup, breakpoints));

    @for $BP from 1 to $numberOfBreakPoints + 1 {

        $breakPoints: nth(nth(map-get($setup, breakpoints), $BP), 2);

        $BPName: map-get($breakPoints, name);
        $BPCols: map-get($breakPoints, cols);
        $BPContainer: map-get($breakPoints, container);
        $BPGutter: map-get($breakPoints, gutter);
        $BPMinViewport: 0px;
        $BPMaxViewport: map-get($breakPoints, viewport);

        @if $BP > 1 {
            $BPMinViewport: map-get(nth(nth(map-get($setup, breakpoints), $BP - 1), 2), viewport);
        }

        @include screen($BPMinViewport + 1, $BPMaxViewport) {
            $colWidth: ((($BPContainer - ($BPGutter * ($BPCols - 1))) / $BPContainer) * (100% / $BPCols));
            $gutterPrc: (($BPGutter / $BPContainer) * 100);
            $colWidthAndGutter: ((($BPContainer - ($BPGutter * ($BPCols - 1))) / $BPContainer) * (100% / $BPCols));

            // Container (and fake grid) Classes
            // Debug purpose (start)
            .grid {
                width: $BPContainer;
            }

            .grid .guide {
                width: $colWidthAndGutter;
                padding-left: $BPGutter;
            }
            // Debug purpose (end)

            .container {
                width: $BPContainer;
            }

            // Grid classes
            @for $COLS from 1 to $BPCols + 1 {

                // Cols (with breakpoints)
                .w#{$COLS}, .w#{$COLS}\(#{$BPName}\), .w#{$COLS}\$, .w#{$COLS}\(#{$BPName}\)\$ {
                    width: ($colWidth * $COLS) + ($gutterPrc * ($COLS - 1));
                    padding-left: $BPGutter;
                }

                // Push cols (with breakpoints)
                .push-#{$COLS}, .push-#{$COLS}\(#{$BPName}\)  {
                    margin-left: ($colWidth * $COLS) + ($gutterPrc * ($COLS));
                }

                // Pull cols (with breakpoints)
                .pull-#{$COLS}, .pull-#{$COLS}\(#{$BPName}\)  {
                    margin-left: -(($colWidth * $COLS) + ($gutterPrc * ($COLS)));
                }

                // Center cols (pair)
                .center\(w#{$COLS}\) {
                    @extend .w#{$COLS};
                    @extend .push-#{ceil(($BPCols - $COLS) / 2)};
                }

                // Center cols with breakpoints
                .center\(w#{$COLS}\)\(#{$BPName}\) {
                    @extend .w#{$COLS}\(#{$BPName}\);
                    @extend .push-#{(ceil(($BPCols - $COLS) / 2))}\(#{$BPName}\);
                }

                // Center with terminator
                .center\(w#{$COLS}\)\$ {
                    @extend .center\(w#{$COLS}\);
                    float: none;
                }

                // Center with breakpoint with terminator
                .center\(w#{$COLS}\)\(#{$BPName}\)\$ {
                    @extend .center\(w#{$COLS}\)\(#{$BPName}\);
                    float: none;
                }

                // After terminator
                .w#{$COLS}\$ + *, .w#{$COLS}\(#{$BPName}\)\$ + * {
                    clear: left;
                    padding-left: 0;
                }
            }
        }
    }
