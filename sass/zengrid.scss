// Zengrid v1.0

// Visual help (True|False)
$DEBUG: True;

// Vars
    $setup: (
        // Grid semantic config
        keywords: (
            columnUnit_char: "w",
            centerSuffix_char: "C",
            offset_char: "offset",
            push_char: "push",
            pull_char: "pull",
            separator_char: "-"
        ),
        // Breakpoints
        breakpoints: (
            // Default breakpoint, mobile first :)
            small: (
                name: "",
                cols: 16,
                viewport: 0px,
                container: 640px,
                gutter: 8px
            ),
            med: (
                name: "m",
                cols: 16,
                viewport: 750px,
                container: 750px,
                gutter: 8px
            ),
            large: (
                name: "l",
                cols: 16,
                viewport: 1600px,
                container: 1200px,
                gutter: 8px
            ),
            xlarge: (
                name: "xl",
                cols: 16,
                viewport: 2500px,
                container: 1500px,
                gutter: 8px
            )
        )
    );

// Helper Classes
    .center {
        text-align: center;
    }

// Grid
    * {
        box-sizing: border-box;
    }

    .row:before,
    .row:after {
        content:"";
        display: table ;
        clear:both;
        position: relative;
    }

    // Breakpoints
    $columnUnit_char: map-get(map-get($setup, keywords), columnUnit_char);
    $centerSuffix_char: map-get(map-get($setup, keywords), centerSuffix_char);
    $offset_char: map-get(map-get($setup, keywords), offset_char);
    $push_char: map-get(map-get($setup, keywords), push_char);
    $pull_char: map-get(map-get($setup, keywords), pull_char);
    $separator_char: map-get(map-get($setup, keywords), pull_char);

    @mixin makeGrid($name, $cols, $viewport, $container, $gutter) {
        @media (min-width: $viewport) {
            @for $i from 1 to $cols + 1 {
                // Column and column with terminator
                .#{$columnUnit_char}#{$i}#{$name}, .w#{$i}#{$name}\$ {
                    float: left;
                    min-height: 1px;
                    padding: ($gutter / 2);
                    position: relative;
                    width: (100% / $cols) * $i;
                    @if $DEBUG == True {
                        min-height: 50px;
                        border-radius: 8px;
                        background-color: rgba(100,200,90, 0.5);
                        background-clip: content-box;
                    }
                }
                // Column behind a column terminator
                .#{$columnUnit_char}#{$i}#{$name}\$ + * {
                    clear: left;
                }
                // Center column
                .#{$columnUnit_char}#{$i}#{$name}#{$centerSuffix_char}, .#{$columnUnit_char}#{$i}#{$name}#{$centerSuffix_char}\$ {
                    @extend .#{$columnUnit_char}#{$i}#{$name};
                    margin-left: (($cols - $i) / 2) * (100% / $cols);
                    @if $DEBUG == True {
                        background-color: rgba(255,20,100,0.5);
                    }
                }
                // Offset (move to the right) colum
                .#{$offset_char}#{$i - 1}#{$name} {
                    margin-left: (100% / $cols) * ($i - 1);
                    @if $DEBUG == True {
                        background-color: rgba(10,20,100,0.5);
                    }
                }
                // Push column (jump to the right)
                .#{$push_char}#{$i - 1}#{$name} {
                    left: (100% / $cols) * ($i - 1);
                    @if $DEBUG == True {
                        background-color: rgba(125,33,220,0.5);
                    }
                }
                // Pull column (jump to the left)
                .#{$pull_char}#{$i - 1}#{$name} {
                    left: -((100% / $cols) * ($i - 1));
                    @if $DEBUG == True {
                        background-color: rgba(95,220,10,0.5);
                    }
                }
            }
            // Percentage (n%)
            @for $i from 1 to 21 {
                $perc: $i * 5;

                // Column percentage
                .\(#{$perc}\%\)#{$name}, .\(#{$perc}\%\)#{$name}\$ {
                    @extend .#{$columnUnit_char}#{1}#{$name};
                    width: #{$perc}%;
                }
                // Column percentage behind terminator
                .\(#{$perc}\%\)#{$name}\$ + * {
                    clear: left;
                }
                // Center
                .\(#{$perc}\%\)#{$name}#{$centerSuffix_char}, .\(#{$perc}\%\)#{$name}#{$centerSuffix_char}\$ {
                    @extend .\(#{$perc}\%\)#{$name};
                    margin-left: (100% - $perc) / 2;
                }
                // Center
                .\(#{$perc}\%\)#{$name}#{$centerSuffix_char}\$ + * {
                    clear: left;
                }
            }
        }
    }

    // Loop for each breakpoints in $setup map
    @for $BP from 1 to length(map-get($setup, breakpoints)) + 1 {
        // Breakpoints $map
        $breakPoints: nth(nth(map-get($setup, breakpoints), $BP), 2);

        // Breakpoint: Propiedades
        $BPName: map-get($breakPoints, name);
        $BPCols: map-get($breakPoints, cols);
        $BPContainer: map-get($breakPoints, container);
        $BPGutter: map-get($breakPoints, gutter);
        $BPViewport: map-get($breakPoints, viewport);

        // Make css grid
        @include makeGrid($BPName, $BPCols, $BPViewport, $BPContainer, $BPGutter);
    }
